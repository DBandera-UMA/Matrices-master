openapi: 3.0.2
info:
  title: Heatmap API
  description: >-
    This api provides us with the set of positions and frequencies of the different connected devices to generate a heat map.
  version: '3.0'
  termsOfService: 'http://spilab.es/'
  contact:
    name: Heatmap 
    url: 'http://spilab.es/'
    email: spilab.uex@gmail.com
tags:
  - name: Map
paths:
  /temperatureAVG:
    get:
      tags:
        - Map
      summary: Average
      description: Obtains the average of the temperatures
      operationId: getTemperatureAVG
      x-aggregation:
        operand: User.temperature
        rules:
          operator:
            type: math
            name: AVG
          conditions:
            precision: 15
            temporal: 2500 (ms)
      responses:
        '200':
          $ref: '#/components/responses/200'
          
  /temperatureCheck:
    get:
      tags:
        - Status
      summary: Temperature check
      description: Obtains users exposed to abnormal temperatures
      operationId: getTemperature
      x-aggregation:
        operand: User.temperature
        rules:
          operator:
            type: custom
            name: filterByTemperature
          conditions:
            precision: 15
            temporal: 2500 (ms)
      responses:
        '200':
          $ref: '#/components/responses/200'

  /temperature:
    get:
      tags:
        - Status
      summary: Gets the environment temperature
      description: Obtains current environment temperature
      operationId: getEnvTemperature
      responses:
        '200':
          $ref: '#/components/responses/200'                    
  /sc/heatmaps:
    get:
      tags:
        - Map
      summary: Get the locations frequency processed in the aggregator
      operationId: getSCHeatmaps
      x-aggregation:
        operand: User.temperature
        rules:
          operator: 
            type: logical / math / specific
            name: AND , OR / MAX , MEAN , MIN
          conditions:
            temporal: 2500 (ms)
            precision: 15

      x-swagger-router-controller: Device
      parameters:
        - name: beginDate
          in: query
          description: init date
          required: true
          schema:
            type: string
            format: date-time
            example: '2019-07-21T17:32:28Z'
      responses:
        '200':
          $ref: '#/components/responses/200'
components:
  schemas:
    LocationsFrequency:
      type: array
      items:
        $ref: '#/components/schemas/LocationFrequency'
    LocationFrequency:
      type: object
      properties:
        latitude:
          type: number
          format: double
          example: 38.48492
        longitude:
          type: number
          format: double
          example: -6.2548987
        frequency:
          type: integer
          format: int64
          example: 6    
  responses:
    '201':
      description: Posted
      content:
        text/plain:
          schema:
            title: Posted
            type: string
    '200':
      description: Successful response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationsFrequency'
